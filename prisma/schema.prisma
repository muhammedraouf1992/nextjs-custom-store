// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
  id                String        @id @default(uuid())
  name              String        @unique
  slug              String
  short_description String
  description       String
  imgUrl            String?
  products          Product[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  SubCategory       SubCategory[]
}

model SubCategory {
  id                String    @id @default(uuid())
  name              String
  categoryId        String
  slug              String
  short_description String
  description       String
  imgUrl            String?
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  Product           Product[]

  @@unique([categoryId, name])
}

model Product {
  id                String             @id @default(uuid())
  name              String
  slug              String
  short_description String
  description       String
  categoryId        String?
  subCategoryId     String?
  is_available      Boolean            @default(false)
  is_newArrival     Boolean            @default(false)
  is_featured       Boolean            @default(false)
  is_bestSeller     Boolean            @default(false)
  category          Category?          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory       SubCategory?       @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  variations        ProductVariation[]
  images            Image[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ProductVariation {
  id        String      @id @default(uuid())
  productId String
  sizeId    String
  colorId   String
  price     Float
  quantity  Int
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  images    Image[] // Relation to images
  size      Size?       @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  color     Color?      @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CartItems CartItem[]
  OrderItem OrderItem[]
}

model Image {
  id                 String  @id @default(uuid())
  productId          String?
  url                String
  description        String?
  productVariationId String? // Nullable if the image can be used for multiple variations

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  productVariation ProductVariation? @relation(fields: [productVariationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id         String             @id @default(uuid())
  name       String             @unique
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  variations ProductVariation[]
}

model Color {
  id         String             @id @default(uuid())
  name       String             @unique
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  variations ProductVariation[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id                 String           @id @default(uuid())
  cartId             String
  productVariationId String
  cart               Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  quantity           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([cartId, productVariationId])
}

enum Role {
  Guest
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(Guest)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
  Order     Order[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  NOTPAID
  PAID
}

model Order {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  orderItems    OrderItem[] // One-to-many relationship with OrderItem
  paymentMethod String        @default("cod")
  paymentStatus PaymentStatus @default(NOTPAID)
  Trnx_ID       Int?
  apartment     String?
  floor         String?
  building      String?
  postal_code   String?
  phone_number  String?
  city          String?
  street        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id                 String           @id @default(cuid())
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            String
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  productVariationId String
  quantity           Int
  price              Float
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
